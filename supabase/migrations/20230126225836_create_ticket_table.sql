drop policy "Enable select for authenticated users only" on "public"."billing";

drop policy "Enable select for authenticated users only" on "public"."commitment";

drop policy "Enable update for authenticated users only" on "public"."billing";

create table "public"."ticket" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "billing_id" uuid not null,
    "commitment_id" uuid not null,
    "owner_id" uuid,
    "status" bigint not null default '1'::bigint
);


alter table "public"."ticket" enable row level security;

CREATE UNIQUE INDEX ticket_pkey ON public.ticket USING btree (id);

alter table "public"."ticket" add constraint "ticket_pkey" PRIMARY KEY using index "ticket_pkey";

alter table "public"."ticket" add constraint "ticket_billing_id_fkey" FOREIGN KEY (billing_id) REFERENCES billing(id) not valid;

alter table "public"."ticket" validate constraint "ticket_billing_id_fkey";

alter table "public"."ticket" add constraint "ticket_commitment_id_fkey" FOREIGN KEY (commitment_id) REFERENCES commitment(id) not valid;

alter table "public"."ticket" validate constraint "ticket_commitment_id_fkey";

alter table "public"."ticket" add constraint "ticket_owner_id_fkey" FOREIGN KEY (owner_id) REFERENCES auth.users(id) not valid;

alter table "public"."ticket" validate constraint "ticket_owner_id_fkey";

create policy "Enable select for all"
on "public"."billing"
as permissive
for select
to public
using (true);


create policy "Enable select for everyone"
on "public"."commitment"
as permissive
for select
to public
using (true);


create policy "Enable update for authenticated users only"
on "public"."billing"
as permissive
for update
to authenticated
using (true)
with check (true);



